load("@rules_cc//cc/toolchains:actions.bzl", "cc_action_type")
load("@rules_cc//cc/toolchains:args.bzl", "cc_args")
load("@rules_cc//cc/toolchains:feature.bzl", "cc_feature")
load("@rules_cc//cc/toolchains:tool.bzl", "cc_tool")
load("@rules_cc//cc/toolchains:tool_map.bzl", "cc_tool_map")
load("//:musl_cc_test_toolchain.bzl", "musl_cc_test_toolchain")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "all_files",
    srcs = glob(["**/*"]),
    visibility = ["//visibility:public"],
)

filegroup(name = "empty")

filegroup(
    name = "dynamic_runtime_lib",
    srcs = glob(["{{target_arch}}-linux-musl/lib/*.so*"]),
)

# Tool definitions
cc_tool(
    name = "gcc_tool",
    src = "bin/{{target_arch}}-linux-musl-gcc",
)

cc_tool(
    name = "ld_tool",
    src = "bin/{{target_arch}}-linux-musl-ld",
)

cc_tool(
    name = "ar_tool",
    src = "bin/{{target_arch}}-linux-musl-ar",
)

cc_tool(
    name = "cpp_tool",
    src = "bin/{{target_arch}}-linux-musl-cpp",
)

cc_tool(
    name = "gcov_tool",
    src = "bin/{{target_arch}}-linux-musl-gcov",
)

cc_tool(
    name = "nm_tool",
    src = "bin/{{target_arch}}-linux-musl-nm",
)

cc_tool(
    name = "objcopy_tool",
    src = "bin/{{target_arch}}-linux-musl-objcopy",
)

cc_tool(
    name = "objdump_tool",
    src = "bin/{{target_arch}}-linux-musl-objdump",
)

cc_tool(
    name = "strip_tool",
    src = "bin/{{target_arch}}-linux-musl-strip",
)

cc_tool(
    name = "dwp_tool",
    src = "/usr/bin/false",
)

# Tool map
cc_tool_map(
    name = "tool_map",
    tools = {
        "gcc": ":gcc_tool",
        "ld": ":ld_tool",
        "ar": ":ar_tool",
        "cpp": ":cpp_tool",
        "gcov": ":gcov_tool",
        "nm": ":nm_tool",
        "objcopy": ":objcopy_tool",
        "objdump": ":objdump_tool",
        "strip": ":strip_tool",
        "dwp": ":dwp_tool",
    },
)

# Argument definitions
cc_args(
    name = "unfiltered_compile_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:assemble",
        "@rules_cc//cc/toolchains/actions:preprocess_assemble",
        "@rules_cc//cc/toolchains/actions:linkstamp_compile",
        "@rules_cc//cc/toolchains/actions:c_compile",
        "@rules_cc//cc/toolchains/actions:cpp_compile",
        "@rules_cc//cc/toolchains/actions:cpp_header_parsing",
        "@rules_cc//cc/toolchains/actions:cpp_module_compile",
        "@rules_cc//cc/toolchains/actions:cpp_module_codegen",
        "@rules_cc//cc/toolchains/actions:lto_backend",
        "@rules_cc//cc/toolchains/actions:clif_match",
    ],
    args = [
        "-no-canonical-prefixes",
        "-fno-canonical-system-headers",
        "-Wno-builtin-macro-redefined",
        "-D__DATE__=\"redacted\"",
        "-D__TIMESTAMP__=\"redacted\"",
        "-D__TIME__=\"redacted\"",
    ],
)

cc_args(
    name = "default_compile_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:assemble",
        "@rules_cc//cc/toolchains/actions:preprocess_assemble",
        "@rules_cc//cc/toolchains/actions:linkstamp_compile",
        "@rules_cc//cc/toolchains/actions:c_compile",
        "@rules_cc//cc/toolchains/actions:cpp_compile",
        "@rules_cc//cc/toolchains/actions:cpp_header_parsing",
        "@rules_cc//cc/toolchains/actions:cpp_module_compile",
        "@rules_cc//cc/toolchains/actions:cpp_module_codegen",
        "@rules_cc//cc/toolchains/actions:lto_backend",
        "@rules_cc//cc/toolchains/actions:clif_match",
    ],
    args = [
        "-U_FORTIFY_SOURCE",
        "-D_FORTIFY_SOURCE=1",
        "-fstack-protector",
        "-Wall",
        "-Wunused-but-set-parameter",
        "-Wno-free-nonheap-object",
        "-fno-omit-frame-pointer",
    ],
)

cc_args(
    name = "debug_compile_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:assemble",
        "@rules_cc//cc/toolchains/actions:preprocess_assemble",
        "@rules_cc//cc/toolchains/actions:linkstamp_compile",
        "@rules_cc//cc/toolchains/actions:c_compile",
        "@rules_cc//cc/toolchains/actions:cpp_compile",
        "@rules_cc//cc/toolchains/actions:cpp_header_parsing",
        "@rules_cc//cc/toolchains/actions:cpp_module_compile",
        "@rules_cc//cc/toolchains/actions:cpp_module_codegen",
        "@rules_cc//cc/toolchains/actions:lto_backend",
        "@rules_cc//cc/toolchains/actions:clif_match",
    ],
    args = ["-g"],
)

cc_args(
    name = "opt_compile_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:assemble",
        "@rules_cc//cc/toolchains/actions:preprocess_assemble",
        "@rules_cc//cc/toolchains/actions:linkstamp_compile",
        "@rules_cc//cc/toolchains/actions:c_compile",
        "@rules_cc//cc/toolchains/actions:cpp_compile",
        "@rules_cc//cc/toolchains/actions:cpp_header_parsing",
        "@rules_cc//cc/toolchains/actions:cpp_module_compile",
        "@rules_cc//cc/toolchains/actions:cpp_module_codegen",
        "@rules_cc//cc/toolchains/actions:lto_backend",
        "@rules_cc//cc/toolchains/actions:clif_match",
    ],
    args = [
        "-g0",
        "-O2",
        "-DNDEBUG",
        "-ffunction-sections",
        "-fdata-sections",
    ],
)

cc_args(
    name = "cpp_std",
    actions = [
        "@rules_cc//cc/toolchains/actions:linkstamp_compile",
        "@rules_cc//cc/toolchains/actions:cpp_compile",
        "@rules_cc//cc/toolchains/actions:cpp_header_parsing",
        "@rules_cc//cc/toolchains/actions:cpp_module_compile",
        "@rules_cc//cc/toolchains/actions:cpp_module_codegen",
        "@rules_cc//cc/toolchains/actions:lto_backend",
        "@rules_cc//cc/toolchains/actions:clif_match",
    ],
    args = ["-std=c++14"],
)

cc_args(
    name = "random_seed",
    actions = [
        "@rules_cc//cc/toolchains/actions:c_compile",
        "@rules_cc//cc/toolchains/actions:cpp_compile",
        "@rules_cc//cc/toolchains/actions:cpp_module_codegen",
        "@rules_cc//cc/toolchains/actions:cpp_module_compile",
    ],
    args = ["-frandom-seed=%{output_file}"],
)

cc_args(
    name = "default_link_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:cpp_link_executable",
        "@rules_cc//cc/toolchains/actions:cpp_link_dynamic_library",
        "@rules_cc//cc/toolchains/actions:cpp_link_nodeps_dynamic_library",
    ],
    args = [
        "-lstdc++",
        "-Wl,-z,relro,-z,now",
        "-no-canonical-prefixes",
        "-pass-exit-codes",
    ],
)

cc_args(
    name = "opt_link_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:cpp_link_executable",
        "@rules_cc//cc/toolchains/actions:cpp_link_dynamic_library",
        "@rules_cc//cc/toolchains/actions:cpp_link_nodeps_dynamic_library",
    ],
    args = ["-Wl,--gc-sections"],
)

cc_args(
    name = "static_link_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:cpp_link_executable",
        "@rules_cc//cc/toolchains/actions:cpp_link_dynamic_library",
    ],
    args = ["-static"],
)

cc_args(
    name = "sysroot_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:preprocess_assemble",
        "@rules_cc//cc/toolchains/actions:linkstamp_compile",
        "@rules_cc//cc/toolchains/actions:c_compile",
        "@rules_cc//cc/toolchains/actions:cpp_compile",
        "@rules_cc//cc/toolchains/actions:cpp_header_parsing",
        "@rules_cc//cc/toolchains/actions:cpp_module_compile",
        "@rules_cc//cc/toolchains/actions:cpp_module_codegen",
        "@rules_cc//cc/toolchains/actions:lto_backend",
        "@rules_cc//cc/toolchains/actions:clif_match",
        "@rules_cc//cc/toolchains/actions:cpp_link_executable",
        "@rules_cc//cc/toolchains/actions:cpp_link_dynamic_library",
        "@rules_cc//cc/toolchains/actions:cpp_link_static_library",
        "@rules_cc//cc/toolchains/actions:cpp_link_nodeps_dynamic_library",
    ],
    args = ["--sysroot=%{sysroot}"],
)

cc_args(
    name = "coverage_compile_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:preprocess_assemble",
        "@rules_cc//cc/toolchains/actions:c_compile",
        "@rules_cc//cc/toolchains/actions:cpp_compile",
        "@rules_cc//cc/toolchains/actions:cpp_header_parsing",
        "@rules_cc//cc/toolchains/actions:cpp_module_compile",
    ],
    args = ["--coverage"],
)

cc_args(
    name = "coverage_link_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:cpp_link_executable",
        "@rules_cc//cc/toolchains/actions:cpp_link_dynamic_library",
        "@rules_cc//cc/toolchains/actions:cpp_link_nodeps_dynamic_library",
    ],
    args = ["--coverage"],
)

cc_args(
    name = "warnings_as_errors_compile",
    actions = [
        "@rules_cc//cc/toolchains/actions:c_compile",
        "@rules_cc//cc/toolchains/actions:cpp_compile",
    ],
    args = ["-Werror"],
)

cc_args(
    name = "warnings_as_errors_link",
    actions = [
        "@rules_cc//cc/toolchains/actions:cpp_link_executable",
        "@rules_cc//cc/toolchains/actions:cpp_link_dynamic_library",
        "@rules_cc//cc/toolchains/actions:cpp_link_nodeps_dynamic_library",
    ],
    args = ["-Wl,-fatal-warnings"],
)

cc_args(
    name = "objcopy_embed_flags",
    actions = ["@rules_cc//cc/toolchains/actions:objcopy_embed_data"],
    args = ["-I", "binary"],
)

cc_args(
    name = "generate_linkmap",
    actions = ["@rules_cc//cc/toolchains/actions:cpp_link_executable"],
    args = ["-Wl,-Map=%{output_execpath}.map"],
)

cc_args(
    name = "runtime_library_search_dirs",
    actions = [
        "@rules_cc//cc/toolchains/actions:cpp_link_executable",
        "@rules_cc//cc/toolchains/actions:cpp_link_dynamic_library",
        "@rules_cc//cc/toolchains/actions:cpp_link_nodeps_dynamic_library",
    ],
    args = [
        "-Xlinker",
        "-rpath",
        "-Xlinker",
        "$ORIGIN/%{runtime_library_search_directories}",
    ],
)

# Feature definitions
cc_feature(
    name = "supports_pic",
    feature_name = "supports_pic",
    args = [],
)

cc_feature(
    name = "supports_dynamic_linker",
    feature_name = "supports_dynamic_linker",
    args = [],
)

cc_feature(
    name = "gcc_quoting_for_param_files",
    feature_name = "gcc_quoting_for_param_files",
    args = [],
)

cc_feature(
    name = "archive_param_file",
    feature_name = "archive_param_file",
    args = [],
)

cc_feature(
    name = "static_link_cpp_runtimes",
    feature_name = "static_link_cpp_runtimes",
    args = [],
)

cc_feature(
    name = "default_compile_flags_feature",
    feature_name = "default_compile_flags",
    args = [
        ":unfiltered_compile_flags",
        ":default_compile_flags",
        ":cpp_std",
        ":random_seed",
    ],
)

cc_feature(
    name = "default_link_flags_feature",
    feature_name = "default_link_flags",
    args = [":default_link_flags"],
)

cc_feature(
    name = "dbg_feature",
    feature_name = "dbg",
    args = [":debug_compile_flags"],
)

cc_feature(
    name = "opt_feature",
    feature_name = "opt",
    args = [
        ":opt_compile_flags",
        ":opt_link_flags",
    ],
)

cc_feature(
    name = "fully_static_link",
    feature_name = "fully_static_link",
    args = [":static_link_flags"],
)

cc_feature(
    name = "sysroot_feature",
    feature_name = "sysroot",
    args = [":sysroot_flags"],
)

cc_feature(
    name = "coverage_feature",
    feature_name = "coverage",
    args = [
        ":coverage_compile_flags",
        ":coverage_link_flags",
    ],
)

cc_feature(
    name = "treat_warnings_as_errors",
    feature_name = "treat_warnings_as_errors",
    args = [
        ":warnings_as_errors_compile",
        ":warnings_as_errors_link",
    ],
)

cc_feature(
    name = "objcopy_embed_flags_feature",
    feature_name = "objcopy_embed_flags",
    args = [":objcopy_embed_flags"],
)

cc_feature(
    name = "generate_linkmap_feature",
    feature_name = "generate_linkmap",
    args = [":generate_linkmap"],
)

cc_feature(
    name = "runtime_library_search_directories_feature",
    feature_name = "runtime_library_search_directories",
    args = [":runtime_library_search_dirs"],
)

# User compile flags support
cc_args(
    name = "user_compile_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:assemble",
        "@rules_cc//cc/toolchains/actions:preprocess_assemble",
        "@rules_cc//cc/toolchains/actions:linkstamp_compile",
        "@rules_cc//cc/toolchains/actions:c_compile",
        "@rules_cc//cc/toolchains/actions:cpp_compile",
        "@rules_cc//cc/toolchains/actions:cpp_header_parsing",
        "@rules_cc//cc/toolchains/actions:cpp_module_compile",
        "@rules_cc//cc/toolchains/actions:cpp_module_codegen",
        "@rules_cc//cc/toolchains/actions:lto_backend",
        "@rules_cc//cc/toolchains/actions:clif_match",
    ],
    args = ["%{user_compile_flags}"],
)

cc_feature(
    name = "user_compile_flags_feature",
    feature_name = "user_compile_flags",
    args = [":user_compile_flags"],
)

# Action type for objcopy embed data
cc_action_type(
    name = "objcopy_embed_data",
    action_name = "objcopy_embed_data",
    tools = [":objcopy_tool"],
)

# New cc_toolchain using the new API
cc_toolchain(
    name = "{{toolchain_name}}",
    all_files = ":all_files",
    ar_files = ":all_files",
    as_files = ":all_files",
    compiler_files = ":all_files",
    coverage_files = ":all_files",
    dwp_files = ":empty",
    linker_files = ":all_files",
    objcopy_files = ":all_files",
    strip_files = ":all_files",
    supports_param_files = True,
    dynamic_runtime_lib = ":dynamic_runtime_lib",
    static_runtime_lib = ":empty",
    tool_map = ":tool_map",
    # Enable default features
    enabled_features = [
        "supports_pic",
        "supports_dynamic_linker",
        "gcc_quoting_for_param_files",
        "archive_param_file",
        "static_link_cpp_runtimes",
        "default_compile_flags",
        "default_link_flags",
        "fully_static_link",
        "sysroot",
        "objcopy_embed_flags",
        "runtime_library_search_directories",
        "user_compile_flags",
    ],
)

# Test toolchain (preserved from original)
musl_cc_test_toolchain(
    name = "{{toolchain_name}}_test_toolchain",
    dynamic_linker = "{{target_arch}}-linux-musl/lib/ld-musl-{{target_arch}}.so.1",
)